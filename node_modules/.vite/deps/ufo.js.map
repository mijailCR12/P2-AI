{
  "version": 3,
  "sources": ["../../ufo/dist/index.mjs"],
  "sourcesContent": ["const n = /[^\\0-\\x7E]/;\r\nconst t = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\r\nconst o = { overflow: \"Overflow Error\", \"not-basic\": \"Illegal Input\", \"invalid-input\": \"Invalid Input\" };\r\nconst e = Math.floor;\r\nconst r = String.fromCharCode;\r\nfunction s(n2) {\r\n  throw new RangeError(o[n2]);\r\n}\r\nconst c = function(n2, t2) {\r\n  return n2 + 22 + 75 * (n2 < 26) - ((t2 != 0) << 5);\r\n};\r\nconst u = function(n2, t2, o2) {\r\n  let r2 = 0;\r\n  for (n2 = o2 ? e(n2 / 700) : n2 >> 1, n2 += e(n2 / t2); n2 > 455; r2 += 36) {\r\n    n2 = e(n2 / 35);\r\n  }\r\n  return e(r2 + 36 * n2 / (n2 + 38));\r\n};\r\nfunction toASCII(o2) {\r\n  return function(n2, o3) {\r\n    const e2 = n2.split(\"@\");\r\n    let r2 = \"\";\r\n    e2.length > 1 && (r2 = e2[0] + \"@\", n2 = e2[1]);\r\n    const s2 = function(n3, t2) {\r\n      const o4 = [];\r\n      let e3 = n3.length;\r\n      for (; e3--; ) {\r\n        o4[e3] = t2(n3[e3]);\r\n      }\r\n      return o4;\r\n    }((n2 = n2.replace(t, \".\")).split(\".\"), o3).join(\".\");\r\n    return r2 + s2;\r\n  }(o2, function(t2) {\r\n    return n.test(t2) ? \"xn--\" + function(n2) {\r\n      const t3 = [];\r\n      const o3 = (n2 = function(n3) {\r\n        const t4 = [];\r\n        let o4 = 0;\r\n        const e2 = n3.length;\r\n        for (; o4 < e2; ) {\r\n          const r2 = n3.charCodeAt(o4++);\r\n          if (r2 >= 55296 && r2 <= 56319 && o4 < e2) {\r\n            const e3 = n3.charCodeAt(o4++);\r\n            (64512 & e3) == 56320 ? t4.push(((1023 & r2) << 10) + (1023 & e3) + 65536) : (t4.push(r2), o4--);\r\n          } else {\r\n            t4.push(r2);\r\n          }\r\n        }\r\n        return t4;\r\n      }(n2)).length;\r\n      let f = 128;\r\n      let i = 0;\r\n      let l = 72;\r\n      for (const o4 of n2) {\r\n        o4 < 128 && t3.push(r(o4));\r\n      }\r\n      const h = t3.length;\r\n      let p = h;\r\n      for (h && t3.push(\"-\"); p < o3; ) {\r\n        let o4 = 2147483647;\r\n        for (const t4 of n2) {\r\n          t4 >= f && t4 < o4 && (o4 = t4);\r\n        }\r\n        const a = p + 1;\r\n        o4 - f > e((2147483647 - i) / a) && s(\"overflow\"), i += (o4 - f) * a, f = o4;\r\n        for (const o5 of n2) {\r\n          if (o5 < f && ++i > 2147483647 && s(\"overflow\"), o5 == f) {\r\n            let n3 = i;\r\n            for (let o6 = 36; ; o6 += 36) {\r\n              const s2 = o6 <= l ? 1 : o6 >= l + 26 ? 26 : o6 - l;\r\n              if (n3 < s2) {\r\n                break;\r\n              }\r\n              const u2 = n3 - s2;\r\n              const f2 = 36 - s2;\r\n              t3.push(r(c(s2 + u2 % f2, 0))), n3 = e(u2 / f2);\r\n            }\r\n            t3.push(r(c(n3, 0))), l = u(i, a, p == h), i = 0, ++p;\r\n          }\r\n        }\r\n        ++i, ++f;\r\n      }\r\n      return t3.join(\"\");\r\n    }(t2) : t2;\r\n  });\r\n}\r\n\r\nconst HASH_RE = /#/g;\r\nconst AMPERSAND_RE = /&/g;\r\nconst SLASH_RE = /\\//g;\r\nconst EQUAL_RE = /=/g;\r\nconst IM_RE = /\\?/g;\r\nconst PLUS_RE = /\\+/g;\r\nconst ENC_BRACKET_OPEN_RE = /%5B/gi;\r\nconst ENC_BRACKET_CLOSE_RE = /%5D/gi;\r\nconst ENC_CARET_RE = /%5E/gi;\r\nconst ENC_BACKTICK_RE = /%60/gi;\r\nconst ENC_CURLY_OPEN_RE = /%7B/gi;\r\nconst ENC_PIPE_RE = /%7C/gi;\r\nconst ENC_CURLY_CLOSE_RE = /%7D/gi;\r\nconst ENC_SPACE_RE = /%20/gi;\r\nconst ENC_SLASH_RE = /%2F/gi;\r\nconst ENC_ENC_SLASH_RE = /%252F/gi;\r\nfunction encode(text) {\r\n  return encodeURI(\"\" + text).replace(ENC_PIPE_RE, \"|\").replace(ENC_BRACKET_OPEN_RE, \"[\").replace(ENC_BRACKET_CLOSE_RE, \"]\");\r\n}\r\nfunction encodeHash(text) {\r\n  return encode(text).replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\r\n}\r\nfunction encodeQueryValue(text) {\r\n  return encode(text).replace(PLUS_RE, \"%2B\").replace(ENC_SPACE_RE, \"+\").replace(HASH_RE, \"%23\").replace(AMPERSAND_RE, \"%26\").replace(ENC_BACKTICK_RE, \"`\").replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\r\n}\r\nfunction encodeQueryKey(text) {\r\n  return encodeQueryValue(text).replace(EQUAL_RE, \"%3D\");\r\n}\r\nfunction encodePath(text) {\r\n  return encode(text).replace(HASH_RE, \"%23\").replace(IM_RE, \"%3F\").replace(ENC_ENC_SLASH_RE, \"%2F\").replace(AMPERSAND_RE, \"%26\").replace(PLUS_RE, \"%2B\");\r\n}\r\nfunction encodeParam(text) {\r\n  return encodePath(text).replace(SLASH_RE, \"%2F\");\r\n}\r\nfunction decode(text = \"\") {\r\n  try {\r\n    return decodeURIComponent(\"\" + text);\r\n  } catch (_err) {\r\n    return \"\" + text;\r\n  }\r\n}\r\nfunction decodePath(text) {\r\n  return decode(text.replace(ENC_SLASH_RE, \"%252F\"));\r\n}\r\nfunction decodeQueryValue(text) {\r\n  return decode(text.replace(PLUS_RE, \" \"));\r\n}\r\nfunction encodeHost(name = \"\") {\r\n  return toASCII(name);\r\n}\r\n\r\nfunction parseQuery(paramsStr = \"\") {\r\n  const obj = {};\r\n  if (paramsStr[0] === \"?\") {\r\n    paramsStr = paramsStr.substr(1);\r\n  }\r\n  for (const param of paramsStr.split(\"&\")) {\r\n    const s = param.match(/([^=]+)=?(.*)/) || [];\r\n    if (s.length < 2) {\r\n      continue;\r\n    }\r\n    const key = decode(s[1]);\r\n    if (key === \"__proto__\" || key === \"constructor\") {\r\n      continue;\r\n    }\r\n    const value = decodeQueryValue(s[2] || \"\");\r\n    if (obj[key]) {\r\n      if (Array.isArray(obj[key])) {\r\n        obj[key].push(value);\r\n      } else {\r\n        obj[key] = [obj[key], value];\r\n      }\r\n    } else {\r\n      obj[key] = value;\r\n    }\r\n  }\r\n  return obj;\r\n}\r\nfunction encodeQueryItem(key, val) {\r\n  if (typeof val === \"number\" || typeof val === \"boolean\") {\r\n    val = String(val);\r\n  }\r\n  if (!val) {\r\n    return encodeQueryKey(key);\r\n  }\r\n  if (Array.isArray(val)) {\r\n    return val.map((_val) => `${encodeQueryKey(key)}=${encodeQueryValue(_val)}`).join(\"&\");\r\n  }\r\n  return `${encodeQueryKey(key)}=${encodeQueryValue(val)}`;\r\n}\r\nfunction stringifyQuery(query) {\r\n  return Object.keys(query).map((k) => encodeQueryItem(k, query[k])).join(\"&\");\r\n}\r\n\r\nclass $URL {\r\n  constructor(input = \"\") {\r\n    this.query = {};\r\n    if (typeof input !== \"string\") {\r\n      throw new TypeError(`URL input should be string received ${typeof input} (${input})`);\r\n    }\r\n    const parsed = parseURL(input);\r\n    this.protocol = decode(parsed.protocol);\r\n    this.host = decode(parsed.host);\r\n    this.auth = decode(parsed.auth);\r\n    this.pathname = decodePath(parsed.pathname);\r\n    this.query = parseQuery(parsed.search);\r\n    this.hash = decode(parsed.hash);\r\n  }\r\n  get hostname() {\r\n    return parseHost(this.host).hostname;\r\n  }\r\n  get port() {\r\n    return parseHost(this.host).port || \"\";\r\n  }\r\n  get username() {\r\n    return parseAuth(this.auth).username;\r\n  }\r\n  get password() {\r\n    return parseAuth(this.auth).password || \"\";\r\n  }\r\n  get hasProtocol() {\r\n    return this.protocol.length;\r\n  }\r\n  get isAbsolute() {\r\n    return this.hasProtocol || this.pathname[0] === \"/\";\r\n  }\r\n  get search() {\r\n    const q = stringifyQuery(this.query);\r\n    return q.length ? \"?\" + q : \"\";\r\n  }\r\n  get searchParams() {\r\n    const p = new URLSearchParams();\r\n    for (const name in this.query) {\r\n      const value = this.query[name];\r\n      if (Array.isArray(value)) {\r\n        value.forEach((v) => p.append(name, v));\r\n      } else {\r\n        p.append(name, value || \"\");\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n  get origin() {\r\n    return (this.protocol ? this.protocol + \"//\" : \"\") + encodeHost(this.host);\r\n  }\r\n  get fullpath() {\r\n    return encodePath(this.pathname) + this.search + encodeHash(this.hash);\r\n  }\r\n  get encodedAuth() {\r\n    if (!this.auth) {\r\n      return \"\";\r\n    }\r\n    const { username, password } = parseAuth(this.auth);\r\n    return encodeURIComponent(username) + (password ? \":\" + encodeURIComponent(password) : \"\");\r\n  }\r\n  get href() {\r\n    const auth = this.encodedAuth;\r\n    const originWithAuth = (this.protocol ? this.protocol + \"//\" : \"\") + (auth ? auth + \"@\" : \"\") + encodeHost(this.host);\r\n    return this.hasProtocol && this.isAbsolute ? originWithAuth + this.fullpath : this.fullpath;\r\n  }\r\n  append(url) {\r\n    if (url.hasProtocol) {\r\n      throw new Error(\"Cannot append a URL with protocol\");\r\n    }\r\n    Object.assign(this.query, url.query);\r\n    if (url.pathname) {\r\n      this.pathname = withTrailingSlash(this.pathname) + withoutLeadingSlash(url.pathname);\r\n    }\r\n    if (url.hash) {\r\n      this.hash = url.hash;\r\n    }\r\n  }\r\n  toJSON() {\r\n    return this.href;\r\n  }\r\n  toString() {\r\n    return this.href;\r\n  }\r\n}\r\n\r\nfunction isRelative(inputStr) {\r\n  return [\"./\", \"../\"].some((str) => inputStr.startsWith(str));\r\n}\r\nconst PROTOCOL_REGEX = /^\\w+:(\\/\\/)?/;\r\nconst PROTOCOL_RELATIVE_REGEX = /^\\/\\/[^/]+/;\r\nfunction hasProtocol(inputStr, acceptProtocolRelative = false) {\r\n  return PROTOCOL_REGEX.test(inputStr) || acceptProtocolRelative && PROTOCOL_RELATIVE_REGEX.test(inputStr);\r\n}\r\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?/;\r\nfunction hasTrailingSlash(input = \"\", queryParams = false) {\r\n  if (!queryParams) {\r\n    return input.endsWith(\"/\");\r\n  }\r\n  return TRAILING_SLASH_RE.test(input);\r\n}\r\nfunction withoutTrailingSlash(input = \"\", queryParams = false) {\r\n  if (!queryParams) {\r\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\r\n  }\r\n  if (!hasTrailingSlash(input, true)) {\r\n    return input || \"/\";\r\n  }\r\n  const [s0, ...s] = input.split(\"?\");\r\n  return (s0.slice(0, -1) || \"/\") + (s.length ? `?${s.join(\"?\")}` : \"\");\r\n}\r\nfunction withTrailingSlash(input = \"\", queryParams = false) {\r\n  if (!queryParams) {\r\n    return input.endsWith(\"/\") ? input : input + \"/\";\r\n  }\r\n  if (hasTrailingSlash(input, true)) {\r\n    return input || \"/\";\r\n  }\r\n  const [s0, ...s] = input.split(\"?\");\r\n  return s0 + \"/\" + (s.length ? `?${s.join(\"?\")}` : \"\");\r\n}\r\nfunction hasLeadingSlash(input = \"\") {\r\n  return input.startsWith(\"/\");\r\n}\r\nfunction withoutLeadingSlash(input = \"\") {\r\n  return (hasLeadingSlash(input) ? input.substr(1) : input) || \"/\";\r\n}\r\nfunction withLeadingSlash(input = \"\") {\r\n  return hasLeadingSlash(input) ? input : \"/\" + input;\r\n}\r\nfunction cleanDoubleSlashes(input = \"\") {\r\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\r\n}\r\nfunction withBase(input, base) {\r\n  if (isEmptyURL(base) || hasProtocol(input)) {\r\n    return input;\r\n  }\r\n  const _base = withoutTrailingSlash(base);\r\n  if (input.startsWith(_base)) {\r\n    return input;\r\n  }\r\n  return joinURL(_base, input);\r\n}\r\nfunction withoutBase(input, base) {\r\n  if (isEmptyURL(base)) {\r\n    return input;\r\n  }\r\n  const _base = withoutTrailingSlash(base);\r\n  if (!input.startsWith(_base)) {\r\n    return input;\r\n  }\r\n  const trimmed = input.substring(_base.length);\r\n  return trimmed[0] === \"/\" ? trimmed : \"/\" + trimmed;\r\n}\r\nfunction withQuery(input, query) {\r\n  const parsed = parseURL(input);\r\n  const mergedQuery = { ...parseQuery(parsed.search), ...query };\r\n  parsed.search = stringifyQuery(mergedQuery);\r\n  return stringifyParsedURL(parsed);\r\n}\r\nfunction getQuery(input) {\r\n  return parseQuery(parseURL(input).search);\r\n}\r\nfunction isEmptyURL(url) {\r\n  return !url || url === \"/\";\r\n}\r\nfunction isNonEmptyURL(url) {\r\n  return url && url !== \"/\";\r\n}\r\nfunction joinURL(base, ...input) {\r\n  let url = base || \"\";\r\n  for (const i of input.filter(isNonEmptyURL)) {\r\n    url = url ? withTrailingSlash(url) + withoutLeadingSlash(i) : i;\r\n  }\r\n  return url;\r\n}\r\nfunction withHttp(input) {\r\n  return withProtocol(input, \"http://\");\r\n}\r\nfunction withHttps(input) {\r\n  return withProtocol(input, \"https://\");\r\n}\r\nfunction withoutProtocol(input) {\r\n  return withProtocol(input, \"\");\r\n}\r\nfunction withProtocol(input, protocol) {\r\n  const match = input.match(PROTOCOL_REGEX);\r\n  if (!match) {\r\n    return protocol + input;\r\n  }\r\n  return protocol + input.substring(match[0].length);\r\n}\r\nfunction createURL(input) {\r\n  return new $URL(input);\r\n}\r\nfunction normalizeURL(input) {\r\n  return createURL(input).toString();\r\n}\r\nfunction resolveURL(base, ...input) {\r\n  const url = createURL(base);\r\n  for (const i of input.filter(isNonEmptyURL)) {\r\n    url.append(createURL(i));\r\n  }\r\n  return url.toString();\r\n}\r\nfunction isSamePath(p1, p2) {\r\n  return decode(withoutTrailingSlash(p1)) === decode(withoutTrailingSlash(p2));\r\n}\r\nfunction isEqual(a, b, opts = {}) {\r\n  if (!opts.trailingSlash) {\r\n    a = withTrailingSlash(a);\r\n    b = withTrailingSlash(b);\r\n  }\r\n  if (!opts.leadingSlash) {\r\n    a = withLeadingSlash(a);\r\n    b = withLeadingSlash(b);\r\n  }\r\n  if (!opts.encoding) {\r\n    a = decode(a);\r\n    b = decode(b);\r\n  }\r\n  return a === b;\r\n}\r\n\r\nfunction parseURL(input = \"\", defaultProto) {\r\n  if (!hasProtocol(input, true)) {\r\n    return defaultProto ? parseURL(defaultProto + input) : parsePath(input);\r\n  }\r\n  const [protocol = \"\", auth, hostAndPath = \"\"] = (input.replace(/\\\\/g, \"/\").match(/([^:/]+:)?\\/\\/([^/@]+@)?(.*)/) || []).splice(1);\r\n  const [host = \"\", path = \"\"] = (hostAndPath.match(/([^/?#]*)(.*)?/) || []).splice(1);\r\n  const { pathname, search, hash } = parsePath(path);\r\n  return {\r\n    protocol,\r\n    auth: auth ? auth.substr(0, auth.length - 1) : \"\",\r\n    host,\r\n    pathname,\r\n    search,\r\n    hash\r\n  };\r\n}\r\nfunction parsePath(input = \"\") {\r\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\r\n  return {\r\n    pathname,\r\n    search,\r\n    hash\r\n  };\r\n}\r\nfunction parseAuth(input = \"\") {\r\n  const [username, password] = input.split(\":\");\r\n  return {\r\n    username: decode(username),\r\n    password: decode(password)\r\n  };\r\n}\r\nfunction parseHost(input = \"\") {\r\n  const [hostname, port] = (input.match(/([^/]*)(:0-9+)?/) || []).splice(1);\r\n  return {\r\n    hostname: decode(hostname),\r\n    port\r\n  };\r\n}\r\nfunction stringifyParsedURL(parsed) {\r\n  const fullpath = parsed.pathname + (parsed.search ? (parsed.search.startsWith(\"?\") ? \"\" : \"?\") + parsed.search : \"\") + parsed.hash;\r\n  if (!parsed.protocol) {\r\n    return fullpath;\r\n  }\r\n  return parsed.protocol + \"//\" + (parsed.auth ? parsed.auth + \"@\" : \"\") + parsed.host + fullpath;\r\n}\r\n\r\nexport { $URL, cleanDoubleSlashes, createURL, decode, decodePath, decodeQueryValue, encode, encodeHash, encodeHost, encodeParam, encodePath, encodeQueryItem, encodeQueryKey, encodeQueryValue, getQuery, hasLeadingSlash, hasProtocol, hasTrailingSlash, isEmptyURL, isEqual, isNonEmptyURL, isRelative, isSamePath, joinURL, normalizeURL, parseAuth, parseHost, parsePath, parseQuery, parseURL, resolveURL, stringifyParsedURL, stringifyQuery, withBase, withHttp, withHttps, withLeadingSlash, withProtocol, withQuery, withTrailingSlash, withoutBase, withoutLeadingSlash, withoutProtocol, withoutTrailingSlash };\r\n"],
  "mappings": "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",
  "names": ["s"]
}
