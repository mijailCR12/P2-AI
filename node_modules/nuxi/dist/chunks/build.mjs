import { r as resolve } from '../shared/nuxi.28ceb2e0.mjs';
import { c as consola } from '../shared/nuxi.5520c85f.mjs';
import { w as writeTypes } from '../shared/nuxi.f9e94a06.mjs';
import { l as loadKit } from '../shared/nuxi.b8c03ac9.mjs';
import { c as clearDir } from '../shared/nuxi.9a68f9c8.mjs';
import { o as overrideEnv } from '../shared/nuxi.6840794e.mjs';
import { a as showVersions } from '../shared/nuxi.83abcdc7.mjs';
import { d as defineNuxtCommand } from '../shared/nuxi.ae044ca8.mjs';
import '../shared/nuxi.ccadf1fb.mjs';
import 'util';
import 'path';
import 'fs';
import 'os';
import 'tty';
import 'node:fs';
import '../shared/nuxi.a3ba4610.mjs';
import 'node:module';
import 'node:url';
import 'assert';
import '../shared/nuxi.3d7f34cc.mjs';

const buildCommand = defineNuxtCommand({
  meta: {
    name: "build",
    usage: "npx nuxi build [--prerender] [rootDir]",
    description: "Build nuxt for production deployment"
  },
  async invoke(args) {
    overrideEnv("production");
    const rootDir = resolve(args._[0] || ".");
    showVersions(rootDir);
    const { loadNuxt, buildNuxt } = await loadKit(rootDir);
    const nuxt = await loadNuxt({
      rootDir,
      overrides: {
        _generate: args.prerender
      }
    });
    await clearDir(nuxt.options.buildDir);
    await writeTypes(nuxt);
    nuxt.hook("build:error", (err) => {
      consola.error("Nuxt Build Error:", err);
      process.exit(1);
    });
    await buildNuxt(nuxt);
  }
});

export { buildCommand as default };
